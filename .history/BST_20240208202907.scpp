#include<iostream>
#include<queue>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

class BST {
private:
    Node* root;

    // Private helper functions for traversals
    void inorderUtil(Node* root) {
        if (root == NULL) return;
        inorderUtil(root->left);
        cout << root->data << " ";
        inorderUtil(root->right);
    }

    void preorderUtil(Node* root) {
        if (root == NULL) return;
        cout << root->data << " ";
        preorderUtil(root->left);
        preorderUtil(root->right);
    }

    void postorderUtil(Node* root) {
        if (root == NULL) return;
        postorderUtil(root->left);
        postorderUtil(root->right);
        cout << root->data << " ";
    }

    void levelOrderUtil(Node* root) {
        if (root == NULL) return;

        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            Node* current = q.front();
            q.pop();
            cout << current->data << " ";
            if (current->left != NULL) q.push(current->left);
            if (current->right != NULL) q.push(current->right);
        }
    }

public:
    BST() {
        root = NULL;
    }

    // Function to insert a node in the BST
    void insert(int val) {
        root = insertUtil(root, val);
    }

    Node* insertUtil(Node* root, int val) {
        if (root == NULL) {
            root = new Node(val);
            return root;
        }

        if (val < root->data)
            root->left = insertUtil(root->left, val);
        else if (val > root->data)
            root->right = insertUtil(root->right, val);

        return root;
    }

    // Public functions for traversals
    void inorderTraversal() {
        cout << "Inorder Traversal: ";
        inorderUtil(root);
        cout << endl;
    }

    void preorderTraversal() {
        cout << "Preorder Traversal: ";
        preorderUtil(root);
    
